apply plugin: 'com.android.application'

def stlType = 'gnustl_static'

android {
    compileSdkVersion = 25
    buildToolsVersion = '25.0.2'

    defaultConfig {
        applicationId = 'com.example.vkdrawcube'
        minSdkVersion   24
        targetSdkVersion  24
        ndk {
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-24',
                          '-DANDROID_TOOLCHAIN=clang',
                          '-DANDROID_STL=c++_static'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def ndkDir = properties.getProperty('ndk.dir')
def shadercLibPath = file(ndkDir).absolutePath + '/sources/third_party/shaderc'

def ndkbuild = 'ndk-build.cmd'

// Either this or the one inside CMakeLists.txt to build shaderc, no need for both
task build_shaderc(type:Exec) {
    workingDir "${shadercLibPath}"
    commandLine "${ndkDir}/${ndkbuild}",
            "NDK_PROJECT_PATH=.",
            "APP_BUILD_SCRIPT=Android.mk",
            "APP_STL:=${stlType}",
            "APP_ABI=all", "-j8",
            "libshaderc_combined"
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn build_shaderc
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
}
